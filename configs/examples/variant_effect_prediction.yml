---
ops: [analyze]
model: {
    path: /absolute/path/to/model/architecture.py, 
    class: ModelArchitectureClassName,
    class_args: {
        arg1: val1,
        arg2: val2
    }
}
analyze_sequences: !obj:selene_sdk.predict.AnalyzeSequences {
    trained_model_path: /path/to/trained/model.pth.tar,
    sequence_length: 1000,
    features: !obj:selene_sdk.utils.load_features_list {
        input_path: /path/to/distinct_features.txt 
    },
    batch_size: 64,
    use_cuda: True,
    # reference sequence version should match the VCF files, not
    # necessarily the version with which the model was trained
    reference_sequence: !obj:selene_sdk.sequences.Genome {
        input_path: /path/to/reference_sequence.fa
    },
    write_mem_limit: 10000
}
variant_effect_prediction: {
    vcf_files: [
       /path/to/file1.vcf,
       /path/to/file2.vcf
    ], 
    save_data: [predictions, abs_diffs],
    output_dir: /path/to/output/predicts/dir,
    output_format: hdf5,
    # specifying a strand index implies that the model detects differences
    # between sequences on the forward and the reverse strands
    strand_index: 7
}
random_seed: 123
...
