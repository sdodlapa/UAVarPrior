# Example configuration file for UAVarPrior
# This file demonstrates the structure and required fields for different operations

# Operations to perform (train, evaluate, analyze)
ops:
  - train
  - evaluate

# Output directory for results and checkpoints
output_dir: ./outputs/example_run

# Model configuration
model:
  # Required: Model class name
  class: SimpleConvModel
  # Optional: Path to saved model weights (required for evaluate/analyze)
  # path: ./outputs/saved_model.pt
  # Optional: Arguments for model constructor
  classArgs:
    input_channels: 4
    conv_channels: [16, 32, 64]
    kernel_size: 3
    pool_size: 2
    dropout: 0.2
    linear_features: [128, 64]
    output_features: 1
  # Optional: Arguments for loss function
  criterionArgs:
    reduction: mean
    pos_weight: 1.0

# Data configuration
data:
  # Required: Dataset class
  dataset_class: uavarprior.data.sequences.SequenceDataset
  # Optional: Batch size
  batch_size: 64
  # Optional: Number of worker processes for data loading
  num_workers: 4
  # Optional: Whether to pin memory (useful for GPU training)
  pin_memory: true
  # Optional: Arguments for training dataset
  train_args:
    data_path: ./data/training_data.h5
    split: train
    transform: null
  # Optional: Arguments for validation dataset
  val_args:
    data_path: ./data/training_data.h5
    split: val
    transform: null

# Training configuration
training:
  # Number of epochs to train
  epochs: 10
  # Learning rate
  lr: 0.001
  # How often to save checkpoints (in epochs)
  checkpoint_interval: 2
  # Optional: Early stopping configuration
  early_stopping:
    patience: 3
    min_delta: 0.001
    monitor: val_loss

# The following sections are only needed for 'analyze' operation:
# analyzer:
#   class: uavarprior.analysis.ProfileAnalyzer
#   args:
#     threshold: 0.5
#     metrics: ["accuracy", "precision", "recall", "f1"]

# prediction:
#   data_path: ./data/test_data.h5
#   batch_size: 32
#   output_format: csv
