name: UAVarPrior CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        exclude:
          # Reduce matrix size for faster execution
          - os: macos-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.8"

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest pytest-cov pytest-xvfb

    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Format check with black
      run: |
        pip install black
        black --check --diff .

    - name: Import sorting check with isort
      run: |
        pip install isort
        isort --check-only --diff .

    - name: Type checking with mypy
      run: |
        pip install mypy
        mypy . --ignore-missing-imports || true

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=uavarprior --cov-report=xml --cov-report=html

    - name: Test model loading and inference
      run: |
        python -c "
        try:
            # Test basic model functionality
            from uavarprior.model.interface import ModelInterface
            print('‚úÖ Model interface import successful')
        except ImportError as e:
            print(f'‚ùå Model import failed: {e}')
            exit(1)
        "

    - name: Test configuration validation
      run: |
        python check_dependencies.py || true
        python -c "
        import yaml
        import os
        # Test configuration files
        config_files = ['fixed-test-analyze.yml', 'full-path-test-analyze.yml']
        for config in config_files:
            if os.path.exists(config):
                with open(config) as f:
                    data = yaml.safe_load(f)
                    print(f'‚úÖ {config} is valid YAML')
            else:
                print(f'‚ö†Ô∏è {config} not found')
        "

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run security checks with bandit
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true

    - name: Dependency vulnerability scan
      run: |
        pip install safety
        safety check || true

  build-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme
        pip install -e .

    - name: Build documentation
      run: |
        if [ -d "docs" ]; then
          cd docs
          make html || echo "Documentation build attempted"
        else
          echo "No docs directory found, skipping documentation build"
        fi

  multi-account-sync-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Verify multi-account synchronization readiness
      run: |
        echo "üîç Checking multi-account synchronization status..."
        
        # Check if push_all.csh exists
        if [ -f "push_all.csh" ]; then
          echo "‚úÖ Multi-account push script found"
        else
          echo "‚ùå Multi-account push script missing"
        fi
        
        # Check for proper SSH configuration documentation
        if [ -f "AUTHENTICATION_GUIDE.md" ]; then
          echo "‚úÖ Authentication guide found"
        else
          echo "‚ö†Ô∏è Authentication guide missing"
        fi
        
        echo "üéØ Repository ready for multi-account synchronization"

  release:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install build dependencies
      run: |
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Publish to PyPI
      if: github.event_name == 'release' && github.event.action == 'published'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/* || echo "PyPI upload requires PYPI_API_TOKEN secret"
